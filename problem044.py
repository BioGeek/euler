# Pentagonal numbers are generated by the formula, P_n=n(3n1)/2. The first ten 
# pentagonal numbers are:
#
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 
# 70  22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, P_j and P_k, for which their sum and 
# difference is pentagonal and D = |P_k - P_j| is minimised; what is the value 
# of D?

from math import sqrt

def pentagonal():
    """pentagonal number generator"""
    n = 1
    while 1:
      yield n*(3*n-1)/2
      n += 1

def firstn(g, n):
    """returns the first n values of a generator"""
    for i in range(n):
        yield g.next()
        
# Check for sample values
assert list(firstn(pentagonal(), 10)) == [1, 5, 12, 22, 35, 51, 70, 92, 117, 145]
    
def isPentagonal(x):
    """checks if a number is pentagonal
    see: http://en.wikipedia.org/wiki/Pentagonal_number"""
    return ((sqrt(24*x +1) + 1)/6)%1==0

# with inspiration from http://duncan99.wordpress.com/2009/12/12/project-euler-problem-44/
pentagonals = []
penta = pentagonal()
flag = True
while flag:
  p = penta.next()
  for pentagonal in pentagonals:
    diff = abs(p - pentagonal)
    if isPentagonal(diff):
      sum = p + pentagonal
      if isPentagonal(sum):
        print diff
        flag = False
  pentagonals.append(p)
  
# 5482660
#
# real	0m2.903s
# user	0m2.430s
# sys	0m0.100s


