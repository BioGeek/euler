# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
# ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred 
# divisors?

from operator import mul

def factors(n):
    """Returns dictionary of n's prime factors, e.g., factors(1960) =>
    {2:3,5:1,7:2}, factors(113) => {113:1} """
    facs = {}
    for i in range(2, 1+n/2):
        while n % i == 0:
            facs[i] = facs.get(i, 0) + 1
            n = n / i
    return facs or {n:1}

def number_of_proper_divisors(n):
    """We can calculate the number of divisors for the natural number n using
    the Tau function. Begin by writing the number as a product of prime factors: 
    n = p^a*q^b*r^c... then the number of divisors, d(n) = (a+1)(b+1)(c+1)...
    see: http://mathschallenge.net/index.php?section=faq&ref=number/number_of_divisors"""
    return reduce(mul, (map(lambda x: x+1, factors(n).values())))

def triangle_number():
    """triangle number generator"""
    sum = 0
    n = 1
    while True:
        sum += n
        yield sum
        n += 1

def firstn(g, n):
    """returns first n values from generator"""
    for i in range(n):
        yield g.next()
        
# Check for example values
assert list(firstn(triangle_number(), 10)) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
assert number_of_proper_divisors(28) == 6

numbers = triangle_number()
for number in numbers:
    if number_of_proper_divisors(number) > 500:
        print number
        break
    
# 76576500 (but took more then 10 minutes)
